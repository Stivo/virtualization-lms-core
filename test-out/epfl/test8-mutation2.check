promoting to effect: Sym(11)=Reflect(ArrayIndex(Sym(10),Const(10)),Summary(false,false,false,false,false,List(Sym(4), Sym(8)),List(Sym(4), Sym(8)),List(),List()),List(Sym(4), Sym(8)))
depends on  Sym(4)
depends on  Sym(8)
promoting to effect: Sym(14)=Reflect(ArrayIndex(Sym(10),Const(10)),Summary(false,false,false,false,false,List(Sym(4), Sym(8)),List(Sym(4), Sym(8)),List(),List()),List(Sym(4), Sym(8), Sym(12), Sym(13)))
depends on  Sym(4)
depends on  Sym(8)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
val x3 = LoopArray(100) { x1 => 
0.0
}
val x4 = x3.clone // mutable
val x7 = LoopArray(100) { x5 => 
0.0
}
val x8 = x7.clone // mutable
val x9 = x0 > 7
val x10 = if (x9) {
x4
} else {
x8
}
val x11 = x10.apply(10)
val x12 = x4.update(10, 10.0)
val x13 = x8.update(10, 20.0)
val x14 = x10.apply(10)
val x15 = x14-x11
val x16 = println(x15)
x16
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
