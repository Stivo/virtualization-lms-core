error: illegal sharing of mutable objects Sym(11)
at Sym(13)=Reflect(ArrayUpdate(Sym(7),Const(5),Sym(11)),Summary(false,false,false,false,false,List(Sym(7), Sym(11)),List(Sym(7), Sym(11)),List(Sym(7)),List(Sym(7))),List(Sym(7), Sym(11), Sym(12)))
promoting to effect: Sym(15)=Reflect(ArrayIndex(Sym(7),Const(5)),Summary(false,false,false,false,false,List(Sym(7)),List(Sym(7)),List(),List()),List(Sym(7), Sym(12), Sym(13)))
depends on  Sym(7)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
val x3 = LoopArray(100) { x1 => 
0.0
}
val x6 = LoopArray(10) { x4 => 
x3
}
val x7 = x6.clone // mutable
val x10 = LoopArray(20) { x8 => 
0.0
}
val x11 = x10.clone // mutable
val x12 = x7.update(4, x3)
val x13 = x7.update(5, x11)
val x14 = x11.update(50, 50.0)
val x15 = x7.apply(5)
val x16 = x15.apply(50)
val x17 = println(x16)
x17
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
