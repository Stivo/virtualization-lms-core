package scala.virtualization.lms
package epfl
package test7

import common._
import test1._

import util.OverloadHack

import java.io.{PrintWriter,StringWriter,FileOutputStream}

import scala.collection.immutable.HashMap


trait HTransformingStuff extends internal.Transforming with HashLoopsExp with ArithExp with PrintExp {

  // TODO: should call constructor functions instead of directly creating objects (i.e. array_length instead of ArrayLength)

  override def mirror[A:Manifest](e: Def[A], f: Transformer): Exp[A] = (e match {
    //case Copy(a) => f(a)
/*
    case SimpleLoop(s,i, ArrayElem(y)) => toAtom(SimpleLoop(f(s), f(i).asInstanceOf[Sym[Int]], ArrayElem(f(y))))
    case SimpleLoop(s,i, ReduceElem(y)) => toAtom(SimpleLoop(f(s), f(i).asInstanceOf[Sym[Int]], ReduceElem(f(y))))
    case SimpleLoop(s,i, ArrayIfElem(c,y)) => toAtom(SimpleLoop(f(s), f(i).asInstanceOf[Sym[Int]], ArrayIfElem(f(c),f(y))))
    case SimpleLoop(s,i, ReduceIfElem(c,y)) => toAtom(SimpleLoop(f(s), f(i).asInstanceOf[Sym[Int]], ReduceIfElem(f(c),f(y))))
    case ArrayIndex(a,i) => toAtom(ArrayIndex(f(a), f(i)))
    case ArrayLength(a) => toAtom(ArrayLength(f(a)))
    case Plus(x,y) => infix_+(f(x), f(y))
    case Minus(x,y) => infix_-(f(x), f(y))
    case Times(x,y) => infix_*(f(x), f(y))
    case Div(x,y) => infix_/(f(x), f(y))
    case Reflect(Print(x), u, es) => reflectMirrored(Reflect(Print(f(x)), mapOver(f,u), f(es)))
    case Reify(x, u, es) => toAtom(Reify(f(x), mapOver(f,u), f(es)))
*/
    case _ => super.mirror(e,f)
  }).asInstanceOf[Exp[A]]

  override def mirrorFatDef[A:Manifest](e: Def[A], f: Transformer): Def[A] = (e match {
/*
    case ArrayElem(y) => ArrayElem(f(y))
    case ReduceElem(y) => ReduceElem(f(y))
    case ArrayIfElem(c,y) => ArrayIfElem(f(c),f(y))
    case ReduceIfElem(c,y) => ReduceIfElem(f(c),f(y))
*/
    case _ => super.mirrorFatDef(e,f)
  }).asInstanceOf[Def[A]]
    
}



trait ScalaGenFatHashLoopsFusionOpt extends ScalaGenHashLoopsFat with LoopFusionOpt {
  val IR: HashLoopsFatExp
  import IR._  
  
  override def unapplySimpleIndex(e: Def[Any]) = e match {
//    case ArrayIndex(a, i) => Some((a,i))
    case _ => super.unapplySimpleIndex(e)
  }
  override def unapplySimpleDomain(e: Def[Int]): Option[Exp[Any]] = e match {
//    case ArrayLength(a) => Some(a)
    case _ => super.unapplySimpleDomain(e)
  }

  override def unapplySimpleCollect(e: Def[Any]) = e match {
//    case ArrayElem(a) => Some(a)
    case _ => super.unapplySimpleCollect(e)
  }

  override def unapplySimpleCollectIf(e: Def[Any]) = e match {
//    case ArrayIfElem(c,a) => Some((a,List(c)))
    case _ => super.unapplySimpleCollectIf(e)
  }

  override def applyAddCondition(e: Def[Any], c: List[Exp[Boolean]]) = e match { //TODO: should c be list or not?
//    case ArrayElem(a) if c.length == 1 => ArrayIfElem(c(0),a)
//    case ReduceElem(a) if c.length == 1 => ReduceIfElem(c(0),a)
    case _ => super.applyAddCondition(e,c)
  }



}


trait CustDB extends Base {
  trait Customer
  
  def loadCustomers: Rep[Array[Customer]]
  def infix_name(x: Rep[Customer]): Rep[String]
  def infix_city(x: Rep[Customer]): Rep[String]
  def infix_expenses(x: Rep[Customer]): Rep[Double]
}

trait CustDBExp extends CustDB with BaseExp {
  case class LoadCustomers() extends Def[Array[Customer]]
  case class CustomerName(x: Exp[Customer]) extends Def[String]
  case class CustomerCity(x: Exp[Customer]) extends Def[String]
  case class CustomerExpenses(x: Exp[Customer]) extends Def[Double]
  
  def loadCustomers: Rep[Array[Customer]] = LoadCustomers()
  def infix_name(x: Rep[Customer]): Rep[String] = CustomerName(x)
  def infix_city(x: Rep[Customer]): Rep[String] = CustomerCity(x)
  def infix_expenses(x: Rep[Customer]): Rep[Double] = CustomerExpenses(x)
}

trait ScalaGenCustDB extends ScalaGenBase {
  val IR: CustDBExp
  import IR._  
  override def emitNode(sym: Sym[Any], rhs: Def[Any])(implicit stream: PrintWriter) = rhs match {
    case LoadCustomers() =>  
      emitValDef(sym, "loadCustomers")
    case CustomerName(x) =>  
      emitValDef(sym, quote(x) +".name")
    case CustomerCity(x) =>  
      emitValDef(sym, quote(x) +".city")
    case CustomerExpenses(x) =>  
      emitValDef(sym, quote(x) +".expenses")
    case _ => super.emitNode(sym, rhs)
  }
}


trait HFusionProg extends Arith with HashLoops with Print with CustDB {
  
  implicit def bla(x: Rep[Int]): Rep[Double] = x.asInstanceOf[Rep[Double]]
  
  def test(x: Rep[Unit]) = {
    
    val data = loadCustomers // Rep[(name: String, city: String, expenses: Double)]

    val custPerCity = hashArray(data.length) { i => (data.at(i).city, data.at(i)) }

    val expensesPerCity1 = hashSum(data.length) { i => (data.at(i).city, data.at(i).expenses) }

    val expensesPerCity2 = hashSum(custPerCity.length) { i => 
      val custs = custPerCity.valueAt(i)
      val value = sum(custs.length) { j => custs.at(j).expenses }
      (custPerCity.keyAt(i), value)
    }

/*

val (custPerCity,expensesPerCity2) = Loop(data.length) { i1 => 

  val custKey = data.at(i1).city
  val custData = data.at(i1)
  hashArray(custKey, custData)
  
  // result, say: ...Tokyo -> Array(Lee,Hwan), LA -> Array(John,Jack,Peter)
  
  val i2 = INDEX_OF_KEY(custKey)
  
  val custs = custPerCity.valueAt(i2)
  val value = sum(custs.length) { j => custs.at(j).expenses }
  val expKey = custPerCity.keyAt(i2)
  val expData = value
  hashSum(expKey, expData)
  
}


val expensesPerCity2 = hashSum(custPerCity.length) { i => 
  val custs = custPerCity.valueAt(i)
  val value = sum(custs.length) { j => custs.at(j).expenses }
  (custPerCity.keyAt(i), value)
}


*/


    print(data)
    print(custPerCity)

    print(expensesPerCity1)
    print(expensesPerCity2)

  }
  
}


/*
trait HFusionProg extends Arith with HashLoops with Print {
  
  implicit def bla(x: Rep[Int]): Rep[Double] = x.asInstanceOf[Rep[Double]]
  
  def test(x: Rep[Unit]) = {
    
    val constant = array(100) { i => 1 }

    val linear = array(100) { i => 2*i }

    val affine = array(100) { i => constant.at(i) + linear.at(i) }
    
    def square(x: Rep[Double]) = x*x
    def mean(x: Rep[Array[Double]]) = sum(x.length) { i => x.at(i) } / x.length
    def variance(x: Rep[Array[Double]]) = sum(x.length) { i => square(x.at(i)) } / x.length - square(mean(x))
    
    val data = affine
    
    val m = mean(data)
    val v = variance(data)

    print(m)
    print(v)
  }
  
}

trait HFusionProg2 extends Arith with HashLoops with Print with OrderingOps {
  
  implicit def bla(x: Rep[Int]): Rep[Double] = x.asInstanceOf[Rep[Double]]
  
  def test(x: Rep[Unit]) = {
    
    def filter[T:Manifest](x: Rep[Array[T]])(p: Rep[T] => Rep[Boolean]) = 
      arrayIf(x.length) { i => (p(x.at(i)), x.at(i)) }
    
    val range = array(100) { i => i }
    
    val odds = filter(range) { z => z > 50 }
    
    val res = sum(odds.length) { i => odds.at(i) }
        
    print(res)
  }
  
}

*/

class TestHashFusion extends FileDiffSuite {
  
  val prefix = "test-out/epfl/test7-"
  
  def testFusion1 = {
    withOutFile(prefix+"hashfusion1") {
      new HFusionProg with ArithExp with HashLoopsExp with PrintExp with CustDBExp { self =>
        val codegen = new ScalaGenHashLoops with ScalaGenArith with ScalaGenPrint with ScalaGenCustDB { val IR: self.type = self }
        codegen.emitSource(test, "Test", new PrintWriter(System.out))
      }
    }
    assertFileEqualsCheck(prefix+"hashfusion1")
  }

  def testFusion2 = {
    withOutFile(prefix+"hashfusion2") {
      new HFusionProg with ArithExp with HashLoopsFatExp with PrintExp with CustDBExp with HTransformingStuff { self =>
        override val verbosity = 1
        val codegen = new ScalaGenFatHashLoopsFusionOpt with ScalaGenArith with ScalaGenPrint with ScalaGenCustDB { val IR: self.type = self }
        codegen.emitSource(test, "Test", new PrintWriter(System.out))
        globalDefs foreach println
      }
    }
    assertFileEqualsCheck(prefix+"hashfusion2")
  }
 
/*
  def testFusion3 = {
    withOutFile(prefix+"hashfusion3") {
      new FusionProg2 with ArithExp with HashLoopsFatExp with PrintExp with IfThenElseExp with OrderingOpsExp with HTransformingStuff { self =>
        override val verbosity = 1
        val codegen = new ScalaGenFatHashLoopsFusionOpt with ScalaGenArith with ScalaGenPrint 
          with ScalaGenIfThenElse with ScalaGenOrderingOps { val IR: self.type = self;
            override def shouldApplyFusion(currentScope: List[TTP])(result: Exp[Any]): Boolean = false }
        codegen.emitSource(test, "Test", new PrintWriter(System.out))
      }
    }
    assertFileEqualsCheck(prefix+"hashfusion3")
  }

  def testFusion4 = {
    withOutFile(prefix+"fusion4") {
      new FusionProg2 with ArithExp with HashLoopsFatExp with PrintExp with IfThenElseExp with OrderingOpsExp with HTransformingStuff { self =>
        override val verbosity = 1
        val codegen = new ScalaGenFatHashLoopsFusionOpt with ScalaGenArith with ScalaGenPrint 
          with ScalaGenIfThenElse with ScalaGenOrderingOps { val IR: self.type = self;
            override def shouldApplyFusion(currentScope: List[TTP])(result: Exp[Any]): Boolean = true }
        codegen.emitSource(test, "Test", new PrintWriter(System.out))
      }
    }
    assertFileEqualsCheck(prefix+"hashfusion4")
  }
*/
 
}